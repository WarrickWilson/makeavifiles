@page "/videos"
@implements IDisposable
@using System.IO;
@using System.Diagnostics;
@using FFmpegBlazor
@inject IJSRuntime Runtime
@using Microsoft.AspNetCore.Components.Forms

<style>
    .statusmessage {
        white-space: pre;
        inline-size: min-content;
        overflow-wrap: break-word;
    }
</style>

<h3>Convert a Video</h3>

<InputFile OnChange="FileLoad" />
<br />
<br />
<label for="videoDataRate">Select video data rate:</label>
<select name="videoDataRate" id="videoDataRate" @bind="VideoDataRate">
    <option value="400">400K</option>
    <option value="450">450K</option>
    <option value="500" selected>500K</option>
    <option value="550">550K</option>
    <option value="600">600K</option>
    <option value="650">650K</option>
</select>
<br />
<br />
<button class="btn btn-primary" @onclick="Process">Convert to AVI</button>
<br />
<br />
<div class="statusmessage" id="statusmsg">@statusmsg</div>

@code
{
    private const int _maxFileSizeAllowed = 200 * 1024 * 1024;  // 200 MB file limit
    string statusmsg = String.Empty;
    string inputFileName;
    string outputFileName;
    string tmpOutputFileName;
    FFMPEG ff;
    byte[] buffer;
    Stopwatch _stopWatch = new Stopwatch();
    List<string> times = new List<string>();
    int currentPass = 0;
    bool keepGoing = true;
    bool transcodeHasError = false;

    int selectedVideoRate = 500;
    private int? _videoRate = 500;
    private int? VideoDataRate 
    { 
        get
        {
            return _videoRate;
        }
        set
        {
            _videoRate = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _stopWatch.Start();
        if (FFmpegFactory.Runtime == null)
        {
            FFmpegFactory.Logger += WriteLogs;
            FFmpegFactory.Progress += ProgressChange;
        }

        //initialize Library
        await FFmpegFactory.Init(Runtime);
        _stopWatch.Stop();
        RecordTime("OnInitializeAsync", _stopWatch.ElapsedMilliseconds);
    }

    public void Dispose()
    {
        if (FFmpegFactory.Runtime != null)
        {
            //FFmpegFactory.Logger -= WriteLogs;
            FFmpegFactory.Progress -= ProgressChange;
        }
    }

    private void RecordTime(string msg, long elapsedMs)
    {
        times.Add(String.Format($"{msg}: {elapsedMs}"));
    }

    async void FileLoad(InputFileChangeEventArgs v)
    {
        ClearStatus();
        transcodeHasError = false;
        _stopWatch.Restart();
        //get first file from input selection
        var file = v.GetMultipleFiles()[0];

        inputFileName = file.Name;
        var inputName = Path.GetFileNameWithoutExtension(inputFileName);
        var fileExtension = Path.GetExtension(inputFileName);
        // TODO: If extension is AVI, check that the file does not meet standards in order to continue processing
        outputFileName = inputName + ".avi";
        if (outputFileName == inputFileName)
        {
            outputFileName = inputName + "_conv" + ".avi";
        }
        tmpOutputFileName = "tmp_" + outputFileName;

        Console.WriteLine($"input file: {inputFileName}");
        Console.WriteLine($"name only: {inputName}");
        Console.WriteLine($"output file: {outputFileName}");
        Console.WriteLine($"content type: {file.ContentType}");

        //read all bytes
        try
        {
            using var stream = file.OpenReadStream(_maxFileSizeAllowed); //Max size for file that can be read
            buffer = new byte[file.Size];

            //read all bytes
            await stream.ReadAsync(buffer);
            _stopWatch.Stop();
            RecordTime("File load", _stopWatch.ElapsedMilliseconds);
        }
        catch (IOException ex) 
        {
            // File was too big
            ShowStatus($"Unable to read the file. {ex.Message}");
        }

        //reRender DOM
        StateHasChanged();
    }

    async void Process()
    {
        ClearStatus();
        ShowStatus("Starting conversion...");

        keepGoing = true;
        transcodeHasError = false;
        times.Clear();
        _stopWatch.Restart();

        //create an instance
        ff = FFmpegFactory.CreateFFmpeg(new FFmpegConfig() { Log = false });
        //ff = FFmpegFactory.CreateFFmpeg();

        var createMpegMs = _stopWatch.ElapsedMilliseconds;

        //download all dependencies from cdn
        //ff.Progress += (p) => Console.WriteLine(p.Ratio);
        //await ff.Load(true);

        await ff.Load();
        var ffLoadMs = _stopWatch.ElapsedMilliseconds;

        if (!ff.IsLoaded) return;

        //write buffer to in-memory files (special emscripten files, Ffmpeg only interact with this file)
        ff.WriteFile(inputFileName, buffer);
        var ffWriteFileMs = _stopWatch.ElapsedMilliseconds;

        selectedVideoRate = VideoDataRate.Value;

        // Pass 1
        currentPass = 1;
        ShowStatus("Pass 1 of 2 starting...");
        try
        {
            await ff.Run("-i", inputFileName, "-xerror", "-s", "640x480", "-aspect", "4:3", "-vf", "fps=24", "-c:v", "mpeg4", "-vtag", "XVID", "-b:v", $"{selectedVideoRate}k", "-an", "-pass", "1", tmpOutputFileName);
        }
        catch (Exception ex)
        {
            ShowStatus($"Pass 1 Exception: {ex.Message}");
            keepGoing = false;
        }
        var msPass1 = _stopWatch.ElapsedMilliseconds;

        if (keepGoing)
        {
            currentPass = 2;
            ShowStatus("Pass 2 of 2 starting...");
            try
            {
                await ff.Run("-i", inputFileName, "-xerror", "-s", "640x480", "-aspect", "4:3", "-vf", "fps=24", "-c:v", "mpeg4", "-vtag", "XVID", "-b:v", $"{selectedVideoRate}k", "-b:a", "96k", "-pass", "2", outputFileName);
            }
            catch (Exception ex)
            {
                ShowStatus($"Pass 2 Exception: {ex.Message}");
            }
            _stopWatch.Stop();
            var msPass2 = _stopWatch.ElapsedMilliseconds;

            RecordTime("Create FFMpeg Instance", createMpegMs);
            RecordTime("Load FFMpeg", ffLoadMs - createMpegMs);
            RecordTime("Write file", ffWriteFileMs - ffLoadMs);
            RecordTime("Pass 1", msPass1 - ffWriteFileMs);
            RecordTime("Pass 2", msPass2 - msPass1);

            ShowStatus("Starting download...");
            await DownloadFileAsync();
            //var res = await ff.ReadFile(outputFileName);
        }

        //delete in-memory file
        ff.UnlinkFile(inputFileName);
        ff.UnlinkFile(tmpOutputFileName);
        ff.UnlinkFile(outputFileName);
        currentPass = 0;

        ////Download the file instantly
        ////Console.WriteLine($"Downloading file...");
        //_stopWatch.Restart();
        //FFmpegFactory.DownloadBufferAsFile(res, outputFileName, "video/x-msvideo");
        //_stopWatch.Stop();
        //RecordTime("Download file", _stopWatch.ElapsedMilliseconds);

        Console.WriteLine("==================");
        foreach (var row in times)
        {
            Console.WriteLine(row);
        }

        if (!transcodeHasError)
        {
            ClearStatus();
        }

        try
        {
            ff.Exit();
        }
        catch
        {
            // Swallow this... bad form, but I'm not sure what to expect here
        }
    }

    async Task DownloadFileAsync()
    {
        //get bytepointer from c wasm to c#
        try
        {
            StateHasChanged();
            var res = await ff.ReadFile(outputFileName);
            var fileLength = res.Length;

            if (fileLength <= 0)
            {
                // Transcode failed - show message
                transcodeHasError = true;
                ShowStatus($"No file was created. The selected video data rate may be too low to create a working output file.");
            }
            else
            {
                //Download the file instantly
                //Console.WriteLine($"Downloading file...");
                _stopWatch.Restart();
                FFmpegFactory.DownloadBufferAsFile(res, outputFileName, "video/x-msvideo");
                _stopWatch.Stop();
                RecordTime("Download file", _stopWatch.ElapsedMilliseconds);
                //Console.WriteLine($"Download complete.");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: error in DownloadFile: {ex.Message}" + Environment.NewLine + $"{ex.StackTrace}");
        }
    }

    void ProgressChange(Progress m)
    {
        // display progress % (0-1)
        Console.WriteLine($"Progress {m.Ratio}");

        //if ffmpeg processing is complete (generate a media URL so that it can be played or alternatively download that file)
        // for two-pass video encoding, this means that second pass is active
        if (m.Ratio >= 1.0 && currentPass == 2)
        {
            //get bytepointer from c wasm to c#
            //var res = await ff.ReadFile(outputFileName);

            ////Download the file instantly
            ////Console.WriteLine($"Downloading file...");
            //var msPreDownload = _stopWatch.ElapsedMilliseconds;
            //FFmpegFactory.DownloadBufferAsFile(res, outputFileName, "video/x-msvideo");
            //var msPostDownload = _stopWatch.ElapsedMilliseconds;
            //RecordTime("Download file", msPostDownload - msPreDownload);

            currentPass = 0;
            //Console.WriteLine($"Download complete.");

            StateHasChanged();
        }
    }

    void WriteLogs(Logs m)
    {
        Console.WriteLine(m.Type + " " + m.Message);

        if (m.Type == "fferr")
        {
            if (m.Message.Contains("error:", StringComparison.InvariantCultureIgnoreCase))
            {
                transcodeHasError = true;
                keepGoing = false;
                ShowStatus("Transcode encountered an error and has stopped");
            }
        }
    }

    void ShowStatus(string msg)
    {
        statusmsg = (string.IsNullOrEmpty(statusmsg)) ? msg : statusmsg + Environment.NewLine + msg;
        StateHasChanged();
    }

    void ClearStatus()
    {
        statusmsg = String.Empty;
        StateHasChanged();
    }
}
